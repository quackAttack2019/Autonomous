package main.java.org.firstinspires.ftc.teamcode;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.hardware.bosch.BNO055IMU;
import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.util.Range;
import java.util.List;
import org.firstinspires.ftc.robotcore.external.ClassFactory;
import org.firstinspires.ftc.robotcore.external.navigation.VuforiaLocalizer;
import org.firstinspires.ftc.robotcore.external.navigation.VuforiaLocalizer.CameraDirection;
import org.firstinspires.ftc.robotcore.external.navigation.VuforiaLocalizer;
import org.firstinspires.ftc.robotcore.external.tfod.TFObjectDetector;
import org.firstinspires.ftc.robotcore.external.tfod.Recognition;
import org.firstinspires.ftc.robotcore.external.navigation.AngleUnit;
import org.firstinspires.ftc.robotcore.external.navigation.AxesOrder;
import org.firstinspires.ftc.robotcore.external.navigation.AxesReference;
import org.firstinspires.ftc.robotcore.external.navigation.Orientation;
import com.qualcomm.hardware.bosch.BNO055IMU;
import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.OpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;

import org.firstinspires.ftc.robotcore.external.navigation.AngleUnit;
import org.firstinspires.ftc.robotcore.external.navigation.AxesOrder;
import org.firstinspires.ftc.robotcore.external.navigation.AxesReference;
import org.firstinspires.ftc.robotcore.external.navigation.Orientation;
import org.firstinspires.ftc.robotcore.external.navigation.Position;
import org.firstinspires.ftc.robotcore.external.navigation.Velocity;
import main.java.org.firstinspires.ftc.teamcode.PID;

import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.OpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.util.Range;
import com.qualcomm.robotcore.hardware.DcMotor;
import org.firstinspires.ftc.robotcore.external.Func;
import org.firstinspires.ftc.robotcore.external.tfod.TFObjectDetector;
import com.qualcomm.robotcore.hardware.GyroSensor;
import com.qualcomm.robotcore.hardware.Gyroscope;

@Autonomous(name="AutoFuck1", group="kys")
public class auto extends LinearOpMode {
    private static final String TFOD_MODEL_ASSET = "RoverRuckus.tflite";
    private static final String LABEL_GOLD_MINERAL = "Gold Mineral";
    private static final String LABEL_SILVER_MINERAL = "Silver Mineral";


    private static final String VUFORIA_KEY = "AXRzWvn/////AAABmXYdAXO58kFWpa1Oywk4cO0x+DXsU2kUOBaQc6YKUZ+y0Q9mVaG/+1PtF14vtQzRC78i8TR9l/MO0LDimHiSTM43VTO41OqC8rJqzWZWWQSbbkKJYyQQyChnHNY9myB/LHRPW6SK65/LTatWNGMBXa8uT/FSFkRMBO88F9K0mC9UbNWHdtEHa/zEE/vXusvv/qwhSshu1fiJC7ZAS611/sd4rfNkUqO8P3VfA8FEalJ2XXSN9A9rIThB3Lry0/jPYSnpkQ76Vgcsx6HzqnIrGo8gytTgbsjQO1wbri8VRhuDJeiUTM8S8xkzeNyZo2/DS50wAm9b6OCQNnypMUPz0zkty+W8aCkHVvWC4+MuVFYI";

    private VuforiaLocalizer vuforia;

    private TFObjectDetector tfod;


    DcMotor leftFMotor;
    Orientation lastAngles = new Orientation();
    BNO055IMU imu;
    Orientation angles;
    DcMotor rightFMotor;
    DcMotor leftBMotor;
    DcMotor rightBMotor;
    DcMotor maalit;
    DcMotor Armhigh, Armlow;
//    DcMotor Arm;
    Servo p;
    double leftPower, rightPower, xValue, yValue, righty, rightx, pid_left, pid_right, current;
    int gyro;


    public void step1() throws InterruptedException {
        PID pid_gyro = new PID(2, 0.01,  0.04,0);
        BNO055IMU.Parameters parameters = new BNO055IMU.Parameters();
        parameters.angleUnit           = BNO055IMU.AngleUnit.RADIANS;
        parameters.     calibrationDataFile = "BNO055IMUCalibration.json";
        parameters.loggingEnabled      = true;
        parameters.loggingTag          = "IMU";
        imu = hardwareMap.get(BNO055IMU.class, "imu");
        imu.initialize(parameters);
        imu.startAccelerationIntegration(new Position(), new Velocity(), 1000);
        boolean step1 = false;

//        Arm = hardwareMap.dcMotor.get("AB");



        telemetry.addData(">", "Press Play to start tracking");
        telemetry.update();
        int goldMineralX = -1;
        int silverMineral1X = -1;
        int silverMineral2X = -1;
        int amount = 0;

        tfod.activate();

        while (!step1) {
            if (tfod != null) {

                List<Recognition> updatedRecognitions = tfod.getUpdatedRecognitions();
                List<Recognition> reco = tfod.getRecognitions();

                if (updatedRecognitions != null) {
                    telemetry.addData("# Object Detected", updatedRecognitions.size());

                    telemetry.addData("Gold Position1", goldMineralX);
                    for (Recognition recognition : updatedRecognitions) {
                        if (recognition.getLabel().equals(LABEL_GOLD_MINERAL)) {
                            goldMineralX = (int) recognition.getLeft() - 640;
                        }
                        telemetry.addData("Gold Position2", goldMineralX);
                        int x = recognition.getImageHeight();
                        int y = recognition.getImageWidth();
                        telemetry.addData("right", x);
                        telemetry.addData("left", y);
                        telemetry.update();
                        idle();
                        amount = updatedRecognitions.size();
                        telemetry.addData("Gold Position3", goldMineralX);
                        if (recognition.getLabel().equals(LABEL_GOLD_MINERAL)) {
                            float kp = goldMineralX / 80;
                            leftFMotor.setPower(kp*0.7);
                            rightFMotor.setPower(-kp*0.7);
                            leftBMotor.setPower(kp*0.7);
                            rightBMotor.setPower(-kp*0.7);
                            amount = updatedRecognitions.size();
                            if (goldMineralX <90 && goldMineralX > -90) {
                                leftFMotor.setPower(Range.clip(0, -100, 100));
                                rightFMotor.setPower(Range.clip(0, -100, 100));
                                leftBMotor.setPower(Range.clip(0, -100, 100));
                                rightBMotor.setPower(Range.clip(0, -100, 100));
                                leftFMotor.setPower(0.75);
                                rightFMotor.setPower(0.75);
                                leftBMotor.setPower(0.75);
                                rightBMotor.setPower(0.75);
                                Thread.sleep(1000);
                                leftFMotor.setPower(Range.clip(0, -100, 100));
                                rightFMotor.setPower(Range.clip(0, -100, 100));
                                leftBMotor.setPower(Range.clip(0, -100, 100));
                                rightBMotor.setPower(Range.clip(0, -100, 100));
                                while(amount != 0){
                                    amount = updatedRecognitions.size();
                                }
                                leftFMotor.setPower(Range.clip(0, -100, 100));
                                rightFMotor.setPower(Range.clip(0, -100, 100));
                                leftBMotor.setPower(Range.clip(0, -100, 100));
                                rightBMotor.setPower(Range.clip(0, -100, 100));
                                step1 = true;
                                break;
                            }
                        }
                    }
                }
                telemetry.update();
            }
            leftFMotor.setPower(Range.clip(0, -100, 100));
            rightFMotor.setPower(Range.clip(0, -100, 100));
            leftBMotor.setPower(Range.clip(0, -100, 100));
            rightBMotor.setPower(Range.clip(0, -100, 100));
        }

    }
    private void initVuforia() {

        VuforiaLocalizer.Parameters parameters = new VuforiaLocalizer.Parameters();

        parameters.vuforiaLicenseKey = VUFORIA_KEY;
        parameters.cameraDirection = CameraDirection.BACK;

        vuforia = ClassFactory.getInstance().createVuforia(parameters);

    }


    private void initTfod(){
        int tfodMonitorViewId = hardwareMap.appContext.getResources().getIdentifier(
                "tfodMonitorViewId", "id", hardwareMap.appContext.getPackageName());
        TFObjectDetector.Parameters tfodParameters = new TFObjectDetector.Parameters(tfodMonitorViewId);
        tfod = ClassFactory.getInstance().createTFObjectDetector(tfodParameters, vuforia);
        tfod.loadModelFromAsset(TFOD_MODEL_ASSET, LABEL_GOLD_MINERAL, LABEL_SILVER_MINERAL);
    }


    public void drive(double a, double b, double c) {
        leftFMotor.setPower(a - b + c);
        leftBMotor.setPower(a - b - c);
        rightFMotor.setPower(a + b - c);
        rightBMotor.setPower(a + b + c);
    }

//    private double getAngle() {
//
//        Orientation angles = imu.getAngularOrientation(AxesReference.INTRINSIC, AxesOrder.XYZ, AngleUnit.DEGREES);
//
//        double angless = angles.firstAngle;
//
//        lastAngles = angles;
//        return (angless);
//    }
     void step0(){
        maalit.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
        maalit.setTargetPosition(18315);
        maalit.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        maalit.setPower(-0.8);
        while(maalit.isBusy()){}
        maalit.setPower(0);
        maalit.setMode(DcMotor.RunMode.RUN_USING_ENCODER);

//        leftBMotor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
//        leftBMotor.setTargetPosition(1000);
//        leftFMotor.setPower(0.3);
//        rightFMotor.setPower(0.3);
//        leftBMotor.setPower(0.3);
//        rightBMotor.setPower(0.3);
//        sleep(450);
//        leftFMotor.setPower(0);
//        rightFMotor.setPower(0);
//        leftBMotor.setPower(0);
//        rightBMotor.setPower(0);

        drive(0,0,0.9);
        sleep(500);
        drive(0,0,0);
    }



    void step2(){
        Armhigh.setPower(-0.80);
        sleep(2000);
        Armhigh.setPower(0);
        Armlow.setPower(0.5);
        sleep(2000);
        Armlow.setPower(0);

    }


    void straightfor(double p, int t){
        leftFMotor.setPower(p);
        rightFMotor.setPower(p);
        leftBMotor.setPower(p);
        rightBMotor.setPower(p);
        sleep(t);
        leftFMotor.setPower(0);
        rightFMotor.setPower(0);
        leftBMotor.setPower(0);
        rightBMotor.setPower(0);
    }

    void stopa(){
        leftFMotor.setPower(0);
        rightFMotor.setPower(0);
        leftBMotor.setPower(0);
        rightBMotor.setPower(0);
    }



    @Override
    public void runOpMode() throws InterruptedException {


        leftFMotor = hardwareMap.dcMotor.get("FL");
        rightFMotor = hardwareMap.dcMotor.get("FR");
        leftBMotor = hardwareMap.dcMotor.get("BL");
        rightBMotor = hardwareMap.dcMotor.get("BR");
        maalit = hardwareMap.dcMotor.get("M");
        Armhigh = hardwareMap.dcMotor.get("AH");
        Armlow = hardwareMap.dcMotor.get("AB");

//        Armhigh.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        maalit.setZeroPowerBehavior(DcMotor.ZeroPowerBehavior.BRAKE);
        p = hardwareMap.servo.get("P");

        maalit.setMode(DcMotor.RunMode.RUN_USING_ENCODER);

        leftFMotor.setDirection(DcMotor.Direction.REVERSE);
        leftBMotor.setDirection(DcMotor.Direction.REVERSE);
        telemetry.addData("Modep", p.getPosition());
        telemetry.update();
        initVuforia();

        initTfod();

        waitForStart();
        if (opModeIsActive()) {
//
//            step0();
//            Armlow.setPower(-0.85);
//            sleep(450);
//            p.setPosition(-1);
//            sleep(400);
//            Armlow.setPower(0);
//            sleep(300);
//            Armlow.setPower(0.6);
//            sleep(700);
//            Armlow.setPower(0);
//

            step1();
//          step2();
            //macflip(gamepad1.left_stick_y, -gamepad1.right_stick_x, gamepad1.right_stick_y);

            telemetry.addData("Mode", "running");
            //telemetry.addData("angels", "  x=" + getAngle());
            telemetry.addData("power", "  left=" + leftPower + "  right=" + rightPower);
            telemetry.update();
            idle();
        }
    }
}
